<h1 class="page-title">üõí Tienda CompuMegaRed</h1>

<div class="product-grid">
  {{#each products}}
  <div class="product-card">
    <img src="{{#if thumbnails.[0]}}{{thumbnails.[0]}}{{else}}https://via.placeholder.com/220x180?text=Sin+Imagen{{/if}}" 
         alt="{{title}}">
    <h4>{{title}}</h4>
    <p>${{price}}</p>
    <button onclick="addToCart('{{this._id}}')">Agregar al carrito</button>
  </div>
  {{/each}}
</div>

<hr style="margin:30px 0;">

<h2 style="color:white; margin-bottom:15px;">üõí Carrito actual</h2>
<ul id="cart-list" style="list-style:none; padding:0;">
  <li>El carrito est√° vac√≠o.</li>
</ul>

<div style="margin-top:20px;">
  <button onclick="clearCart()" style="padding:8px 15px; margin-right:10px;">Vaciar carrito</button>
  <button onclick="checkout()" style="padding:8px 15px;">Realizar compra</button>
</div>

<script>
  const cartId = "{{cartId}}";
</script>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
  async function addToCart(productId) {
    try {
      const res = await fetch(`/api/carts/${cartId}/product/${productId}`, {
        method: 'POST'
      });

      if (!res.ok) throw new Error('Error en el servidor');

      Swal.fire("üõí Producto agregado", "El producto fue a√±adido al carrito", "success");
      renderCart();
    } catch (error) {
      console.error('‚ùå Error agregando al carrito:', error);
      Swal.fire("‚ö†Ô∏è Error", "No se pudo agregar el producto al carrito", "error");
    }
  }

  async function clearCart() {
    try {
      const res = await fetch(`/api/carts/${cartId}`, {
        method: 'DELETE'
      });

      if (!res.ok) throw new Error('Error al vaciar el carrito');

      Swal.fire("üóëÔ∏è Carrito vaciado", "Se eliminaron todos los productos del carrito", "success");
      renderCart();
    } catch (error) {
      console.error("‚ùå Error al vaciar carrito:", error);
      Swal.fire("‚ö†Ô∏è Error", "No se pudo vaciar el carrito", "error");
    }
  }

  async function renderCart() {
    try {
      const res = await fetch(`/api/carts/${cartId}`);
      const data = await res.json();
      const cartItems = data.payload.products;

      const cartList = document.getElementById('cart-list');
      cartList.innerHTML = '';

      if (cartItems.length === 0) {
        cartList.innerHTML = '<li>El carrito est√° vac√≠o.</li>';
        return;
      }

      let total = 0;

      cartItems.forEach(p => {
        const subtotal = p.product.price * p.quantity;
        total += subtotal;
        cartList.innerHTML += `
          <li style="margin-bottom:10px; padding:8px; background-color:#2d1d4c; border-radius:4px; color:white;">
            <strong>${p.product.title}</strong> - $${p.product.price} x ${p.quantity} = $${subtotal.toFixed(2)}
          </li>`;
      });

      cartList.innerHTML += `<li style="margin-top:15px; font-weight:bold; color:white;">Total: $${total.toFixed(2)}</li>`;
    } catch (error) {
      console.error("‚ùå Error al cargar carrito:", error);
    }
  }

  async function checkout() {
    try {
      const res = await fetch(`/api/carts/${cartId}`);
      const data = await res.json();
      const cartItems = data.payload.products;

      if (cartItems.length === 0) {
        Swal.fire("El carrito est√° vac√≠o", "Agrega productos antes de comprar", "warning");
        return;
      }

      const metodo = await Swal.fire({
        title: 'Eleg√≠ un m√©todo de pago',
        input: 'radio',
        inputOptions: {
          transferencia: 'Transferencia Bancaria',
          tarjeta: 'Tarjeta de Cr√©dito'
        },
        inputValidator: (value) => {
          if (!value) return 'Debes seleccionar un m√©todo';
        },
        confirmButtonText: 'Continuar',
        showCancelButton: true
      });

      if (!metodo.isConfirmed) return;

      if (metodo.value === 'transferencia') {
        await Swal.fire({
          icon: 'info',
          title: 'Transferencia Bancaria',
          html: `
            <p>Enviar el pago a: <strong>CUENTA FALSA: 000-9999-FAKE</strong></p>
            <p>Enviar comprobante a: <strong>cuentafalsa@fake123.com</strong></p>
            <p>üì© Dentro de las 24 horas tendr√°s respuesta de tu compra.</p>
          `
        });
      } else if (metodo.value === 'tarjeta') {
        const form = await Swal.fire({
          title: 'Pago con Tarjeta',
          html: `
            <input type="text" placeholder="Nombre en tarjeta" class="swal2-input">
            <input type="text" placeholder="N√∫mero de tarjeta" class="swal2-input">
            <input type="text" placeholder="Vencimiento MM/AA" class="swal2-input">
            <input type="text" placeholder="CVV" class="swal2-input">
            <select class="swal2-select">
              <option>Visa</option>
              <option>Mastercard</option>
              <option>American Express</option>
            </select>
          `,
          confirmButtonText: 'Pagar',
          preConfirm: () => true
        });

        if (!form.isConfirmed) return;

        await Swal.fire("‚úÖ Pago aprobado", "Gracias por tu compra", "success");
      }

      await guardarCompra(metodo.value, cartItems);
      await clearCart();
    } catch (error) {
      console.error("‚ùå Error en el proceso de compra:", error);
      Swal.fire("‚ö†Ô∏è Error", "No se pudo completar la compra", "error");
    }
  }

  async function guardarCompra(metodoPago, cartItems) {
    const usuario = JSON.parse(localStorage.getItem("user"));
    if (!usuario || !usuario.email) {
      Swal.fire("‚ö†Ô∏è Error", "No hay usuario autenticado", "error");
      return;
    }

    const compra = {
      email: usuario.email,
      date: new Date().toISOString(),
      method: metodoPago,
      status: metodoPago === 'transferencia' ? 'pendiente' : 'confirmado',
      items: cartItems.map(p => ({
        title: p.product.title,
        quantity: p.quantity,
        price: p.product.price,
        subtotal: (p.quantity * p.product.price).toFixed(2)
      })),
      total: cartItems.reduce((acc, p) => acc + p.product.price * p.quantity, 0).toFixed(2)
    };

    try {
      const res = await fetch('/api/purchases', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(compra)
      });

      const data = await res.json();
      console.log("‚úÖ Compra registrada:", data);
    } catch (error) {
      console.error("‚ùå Error al guardar la compra:", error);
    }
  }

  // Cargar carrito cuando se abre la p√°gina
  window.addEventListener('DOMContentLoaded', renderCart);
</script>

<script>
  const url = new URL(window.location.href);
  if (!url.searchParams.get("email")) {
    const usuario = JSON.parse(localStorage.getItem("user"));
    if (usuario && usuario.email) {
      const encodedEmail = encodeURIComponent(usuario.email);
      window.location.href = `/shop?email=${encodedEmail}`;
    }
  }
</script>



